schema {
    query: Query
    mutation: Mutation
}

type Author {
    name: String!
    familyName: String
}

type Book {
    title: String!
    author: Author!
}

type Mutation {
    deleteBooks(filter: BookFilterInput): String!
}

type Query {
    book(where: BookFilterInput @cost(weight: "10")): Book!
}

input AuthorFilterInput {
    and: [AuthorFilterInput!]
    or: [AuthorFilterInput!]
    name: StringOperationFilterInput
    familyName: StringOperationFilterInput
}

input BookFilterInput {
    and: [BookFilterInput!]
    or: [BookFilterInput!]
    title: StringOperationFilterInput
    author: AuthorFilterInput
}

input StringOperationFilterInput {
    and: [StringOperationFilterInput!]
    or: [StringOperationFilterInput!]
    eq: String @cost(weight: "10")
    neq: String @cost(weight: "10")
    contains: String @cost(weight: "20")
    ncontains: String @cost(weight: "20")
    in: [String] @cost(weight: "10")
    nin: [String] @cost(weight: "10")
    startsWith: String @cost(weight: "20")
    nstartsWith: String @cost(weight: "20")
    endsWith: String @cost(weight: "20")
    nendsWith: String @cost(weight: "20")
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION